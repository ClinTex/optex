type TableInfo = 
 record {
   fieldDefinitions: vec TableFieldInfo;
   recordCount: nat;
   tableName: text;
 };
type TableFragmentField = 
 record {
   fieldName: text;
   fieldType: int;
 };
type TableFragment = 
 record {
   count: int;
   data: vec vec text;
   fieldDefinitions: vec TableFragmentField;
   total: int;
 };
type TableFieldInfo = 
 record {
   fieldName: text;
   fieldType: int;
 };
type Result = 
 record {
   errorCode: nat;
   errorText: text;
   errored: bool;
   resultIds: vec vec text;
 };
type DatabaseInfo = 
 record {
   databaseName: text;
   tables: vec TableInfo;
 };
service : {
  addTableData: (text, text, vec vec text) -> (Result);
  createDatabase: (text) -> (Result);
  createTable: (text, text, vec TableFieldInfo) -> (Result);
  getAllTableData: (text, text) -> (TableFragment) query;
  getDatabaseInfo: (text) -> (DatabaseInfo) query;
  getTableInfo: (text, text) -> (TableInfo) query;
  hasDatabase: (text) -> (bool) query;
  hasTable: (text, text) -> (bool) query;
  listDatabases: () -> (vec DatabaseInfo) query;
  removeDatabase: (text) -> (Result);
  removeTable: (text, text) -> (Result);
  removeTableData: (text, text, vec text) -> (Result);
  updateTableData: (text, text, text, vec text) -> (Result);
}
